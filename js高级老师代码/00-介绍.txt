第1天：es6中面向对象的写法
第2天：es3中面向对象的写法
第3天：js有函数的高级用法  （闭包  递归）
第4天：正则表达式：匹配你要想格式的字符串
第5天：es6的用法

day1
    1.面向过程 与 面向对象

    生活：
        烧水-> 和面 -> 拉面 -> 煮面 -> 吃面        面向过程
        找面馆 -> 吃面                            面向对象
    程序：
        面向过程：代码自己一步一步写，完成
        面向对象：找对象（找别人写好的东西） 引用

    面向对象不能取代面向过程

    面向对象编程特性：封装 多态 继承 抽象

    2.类 与 对象

        类：  泛指 ，模板
        对象：具体的事物

        class 类名 {
            constructor(形参){
                该函数在new时自动执行
            }
            
            方法1(){}
            方法2(){}
            方法3(){}
            ...
        }

        var 实例 = new 类名(实参)

    3.继承：
    class 子类名 extends 父类 {
        constructor(){
            super()
        }
        ...
    }
 
day2
    1.构造函数与对象
    
        a.构造函数的执行过程
        b.构造函数返回值问题

    2.静态成员与实例成员
        实例身上的属性与方法叫做实例成员
        函数身上的属性与方法叫做静态成员

        函数的静态属性length的值是该函数的形参个数

    3.原型prototype
        为什么会有原型：为了减少内存占用。
        将构造函数内部的方法全部写在原型中
        如：
        Person.prototype.sing = function(){}

    4.原型对象__proto__ (非标准)
        实例.__proto__ 指向 原型
        如 p.__proto__ == Person.prototype

    5.constructor
        原型上的属性 又指回 构造函数
        如：  Person == Person.prototype.constructor

    6.原型链
        每一个对象身上都有__proto__属性。
        由此 对象有原型 对象的原型有原型 。。。一直到null
        构成一条原型链

    7. 对象的属性与方法查找规则
        自己身上没有属性与方法，就是原型中去找，原型中也没有，就去原型的原型中去找，直到null
        如果都没有找到：报错

    8.继承
        es3中实现继承是使用的组合继承。
        
        function Son(){
            Father.call(this,name,age)
        }
        Son.prototype = new Father();

    9.es5中数组的方法
        forEach() 
        map() 
        filter()  
        some()  
        every()

    10.es5中字符串的方法
        trim()

    11.es5中对象的方法
        Object.keys()
        Object.defineProperty(obj,property,{配置项})  
  
day3

    函数在js中是一等公民

  1.函数声明的几种方式

  2.函数调用的几种方式

  3.函数的高级用法 参数，返回值

  4.闭包

  5.递归


